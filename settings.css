@font-face {
    font-family: "cybersloth";
    src: url(font/CyberSloth.ttf) format("truetype");
}

body, html{
    background: #3a3191 url("images/misc/background2.png");
    width: 100%;
    height: 100%;
    margin: 0;
    font-family: "cybersloth", sans-serif, Tahoma;
    padding: 0;
    overflow: hidden;
    position: relative;
}

#settings {
    position: absolute;
    display: flex;
    left: 10%;
    right: 10%;
    top: 10%;
    bottom: 10%;
}


#menu {

    width: 50%;
}
#filler {
    background: url("images/misc/menuimg.png") no-repeat;
    background-size: contain;
    width: 50%;
}

.menu_tab {
    display: none;
    height: 100%;
}
.menu_items{
    display: flex;
    flex-direction: column;
    height: 100%;
    justify-content: center;
}
.menu_row{
    margin: 10px auto;
    min-width: 60%;
    max-width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}
#player_icons{
    margin: 10px auto;
    min-width: 60%;
    max-width: 100%;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: stretch;
}

.menu_single{
    margin: 10px auto;
}

.menu_link{
    font-size: 32px;
    color: #fff87f;
    text-shadow: 2px 2px black, -2px 2px black, 2px -2px black, -2px -2px black, 2px 0 black, 0 2px black, -2px 0 black, 0 -2px black;
    cursor: pointer;
}

.menu_link.selected{
    color: #ff9b00;
}
.menu_link.disabled{
    color: rgb(100, 95, 50);
}
.menu_link.selected.disabled{
    color: rgb(100, 63, 0);
}
input{
    background-color: rgba(255, 0, 0, 0);
    font-family: "cybersloth", sans-serif, Tahoma;
    text-align: right;
    border: none;
    font-size: 32px;
    color: #fff87f;
    text-shadow: 2px 2px black, -2px 2px black, 2px -2px black, -2px -2px black, 2px 0 black, 0 2px black, -2px 0 black, 0 -2px black;
    cursor: pointer;
    padding: 0;
    margin: 0;
    outline: none;
}
input[type=text]{
    width: 200px;
    border-bottom: #000000 solid 2px;
}
input[type=text].selected{
    border-bottom: #ff9b00 solid 2px;
}
input[type=checkbox]{
    width: 32px;
}

input[type=number]{
    caret-color: rgba(255, 0, 0, 0);
    width: 100px;
}

input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}
label, #player_count{
    font-size: 32px;
}
input.selected{
    color: #ff9b00;
}

.icon_text{
    position: absolute;
    top: 60%;
    left: 58%;
    color: white;
    transform: translate(-50%, -50%);
    filter: drop-shadow(1px 1px 0 rgb(0, 0, 0))
            drop-shadow(1px -1px 0 rgb(0, 0, 0))
            drop-shadow(-1px 1px 0 rgb(0, 0, 0))
            drop-shadow(-1px -1px 0 rgb(0, 0, 0));
}


.icon {
    margin: 0 4px 12px -14px;
    position: relative;
    text-align: center;
}
.icon > img{
	filter: drop-shadow(2px 2px 0 rgb(255, 248, 127))
            drop-shadow(2px -2px 0 rgb(255, 248, 127))
            drop-shadow(-2px 2px 0 rgb(255, 248, 127))
            drop-shadow(-2px -2px 0 rgb(255, 248, 127));
}


.icon.selected > img{
	filter: drop-shadow(2px 2px 0 rgb(255, 155, 0))
            drop-shadow(2px -2px 0 rgb(255, 155, 0))
            drop-shadow(-2px 2px 0 rgb(255, 155, 0))
            drop-shadow(-2px -2px 0 rgb(255, 155, 0));
}

.icon.gone > img{
	filter: drop-shadow(2px 2px 0 rgb(100, 95, 50))
            drop-shadow(2px -2px 0 rgb(100, 95, 50))
            drop-shadow(-2px 2px 0 rgb(100, 95, 50))
            drop-shadow(-2px -2px 0 rgb(100, 95, 50));
}

.icon.selected.gone > img{
	filter: drop-shadow(2px 2px 0 rgb(100, 63, 0))
            drop-shadow(2px -2px 0 rgb(100, 63, 0))
            drop-shadow(-2px 2px 0 rgb(100, 63, 0))
            drop-shadow(-2px -2px 0 rgb(100, 63, 0));
}

.icon.chosen > img{
	filter: drop-shadow(2px 2px 0 rgb(0, 0, 255))
            drop-shadow(2px -2px 0 rgb(0, 0, 255))
            drop-shadow(-2px 2px 0 rgb(0, 0, 255))
            drop-shadow(-2px -2px 0 rgb(0, 0, 255));
}

.icon.mystery > img{
    margin: 10000px 0 -10000px 0;
	filter: drop-shadow(0px -10000px 0 rgb(0, 0, 0))
            drop-shadow(2px 2px 0 rgb(100, 95, 50))
            drop-shadow(2px -2px 0 rgb(100, 95, 50))
            drop-shadow(-2px 2px 0 rgb(100, 95, 50))
            drop-shadow(-2px -2px 0 rgb(100, 95, 50));
}

.icon.mystery.selected > img{
	filter: drop-shadow(0px -10000px 0 rgb(0, 0, 0))
            drop-shadow(2px 2px 0 rgb(100, 63, 0))
            drop-shadow(2px -2px 0 rgb(100, 63, 0))
            drop-shadow(-2px 2px 0 rgb(100, 63, 0))
            drop-shadow(-2px -2px 0 rgb(100, 63, 0));
}


.checkbox input[type="checkbox"] {
    opacity: 0;
}

.checkbox label {
    position: relative;
    display: inline-block;

    /*16px width of fake checkbox + 6px distance between fake checkbox and text*/
    padding-left: 22px;
}

.checkbox label::before,
.checkbox label::after {
    position: absolute;
    content: "";

    /*Needed for the line-height to take effect*/
    display: inline-block;
}

/*Outer box of the fake checkbox*/
.checkbox label::before{
    height: 16px;
    width: 16px;

    border: 1px solid;
    left: 0px;

    /*(24px line-height - 16px height of fake checkbox) / 2 - 1px for the border
     *to vertically center it.
     */
    top: 3px;
}

/*Checkmark of the fake checkbox*/
.checkbox label::after {
    height: 5px;
    width: 9px;
    border-left: 2px solid;
    border-bottom: 2px solid;

    transform: rotate(-45deg);

    left: 4px;
    top: 7px;
}

/*Hide the checkmark by default*/
.checkbox input[type="checkbox"] + label::after {
    content: none;
}

/*Unhide on the checked state*/
.checkbox input[type="checkbox"]:checked + label::after {
    content: "";
}

/*Adding focus styles on the outer-box of the fake checkbox*/
.checkbox input[type="checkbox"]:focus + label::before {
    outline: rgb(59, 153, 252) auto 5px;
}
